# -*- python -*-
# ex: set syntax=python:

# This is a sample buildmaster config file. It must be installed as
# 'master.cfg' in your buildmaster's base directory.

# This is the dictionary that the buildmaster pays attention to. We also use
# a shorter alias to save typing.
c = BuildmasterConfig = {}

####### PASSWORD FILE

from ConfigParser import RawConfigParser
import os
pw = RawConfigParser()
pw.read(os.path.join(os.path.dirname(__file__), 'passwords.ini'))

####### BUILDSLAVES

# The 'slaves' list defines the set of recognized buildslaves. Each element is
# a BuildSlave object, specifying a unique slave name and password.  The same
# slave name and password must be configured on the slave.
from buildbot.buildslave import BuildSlave
c['slaves'] = []
slaves = {
    'el6-amd64': {},
    'f20-amd64': {},
    'fbsd10-amd64': {
        'CPATH': '/usr/local/include',
        'LIBRARY_PATH': '/usr/local/lib',
        'make': 'gmake',
    },
    'wheezy-ia32': {},
}
for name, props in slaves.items():
    slave = BuildSlave(name, pw.get('slaves', name), properties=props)
    c['slaves'].append(slave)

# 'protocols' contains information about protocols which master will use for
# communicating with slaves.
# You must define at least 'port' option that slaves could connect to your master
# with this protocol.
# 'port' must match the value configured into the buildslaves (with their
# --master option)
c['protocols'] = {'pb': {'port': 'tcp:9989:interface=127.0.0.1'}}

####### CHANGESOURCES

# the 'change_source' setting tells the buildmaster how it should find out
# about source code changes.  Here we point to the buildbot clone of pyflakes.

from buildbot.changes.gitpoller import GitPoller
from buildbot.changes.pb import PBChangeSource
c['change_source'] = [
    PBChangeSource(
        user=pw.get('changesource', 'user'),
        passwd=pw.get('changesource', 'pass'),
    ),
]

####### BUILDERS

# The 'builders' list defines the Builders, which tell Buildbot how to perform a build:
# what steps, and which slaves can execute them.  Note that any particular build will
# only take place on one slave.

from buildbot.process.factory import BuildFactory
from buildbot.process.properties import Property
from buildbot.steps.source.git import Git
from buildbot.steps.shell import ShellCommand, Configure, Compile

# Common property expansions

make = Property('make', default='make')
parallel = Property('parallel', default='-j1')
env = {
    'CPATH': Property('CPATH'),
    'LIBRARY_PATH': Property('LIBRARY_PATH'),
}

# Build factories

test_factory = BuildFactory([
    Git(
        repourl='https://github.com/openslide/openslide',
        codebase='openslide',
        mode='full',
    ),
    ShellCommand(
        command=['autoreconf', '-i'],
        name='autoreconf',
        description='autoconfiscating',
        descriptionDone='autoreconf',
    ),
    Configure(
        env=env,
    ),
    Compile(
        command=[make, parallel, 'V=1'],
        env=env,
    ),
])

from buildbot.config import BuilderConfig

c['builders'] = []
# test-* builders
for slave in c['slaves']:
    c['builders'].append(BuilderConfig(
        name='test-' + slave.slavename,
        category='test',
        slavename=slave.slavename,
        factory=test_factory
    ))

####### SCHEDULERS

# Configure the Schedulers, which decide how to react to incoming changes.  In this
# case, just kick off a 'runtests' build

from buildbot.schedulers.basic import SingleBranchScheduler
from buildbot.changes import filter
c['schedulers'] = [
    SingleBranchScheduler(
        name="test",
        builderNames=[
            b.name for b in c['builders'] if b.name.startswith('test-')
        ],
        change_filter=filter.ChangeFilter(
            codebase='openslide',
            branch='master',
        ),
        codebases={
            'openslide': {
                'repository': 'https://github.com/openslide/openslide',
                'branch': 'master',
            }
        },
#        treeStableTimer=120,
    ),
]

####### STATUS TARGETS

# 'status' is a list of Status Targets. The results of each build will be
# pushed to these targets. buildbot/status/*.py has a variety to choose from,
# including web pages, email senders, and IRC bots.

from buildbot.status import html
from buildbot.status.web import authz

c['status'] = [
    html.WebStatus(
        http_port='tcp:8010:interface=127.0.0.1',
        authz=authz.Authz(),
    ),
]

####### PROJECT IDENTITY

# the 'title' string will appear at the top of this buildbot
# installation's html.WebStatus home page (linked to the
# 'titleURL') and is embedded in the title of the waterfall HTML page.

c['title'] = "OpenSlide"
c['titleURL'] = "http://openslide.org/"

# the 'buildbotURL' string should point to the location where the buildbot's
# internal web server (usually the html.WebStatus page) is visible. This
# typically uses the port number set in the Waterfall 'status' entry, but
# with an externally-visible host name which the buildbot cannot figure out
# without some help.

c['buildbotURL'] = "http://buildbot.openslide.org/"

####### DB URL

c['db'] = {
    # This specifies what database buildbot uses to store its state.  You can leave
    # this at its default for all but the largest installations.
    'db_url' : "sqlite:///state.sqlite",
}

####### CODEBASES

all_repositories = {
    'https://github.com/openslide/openslide': 'openslide',
    'https://github.com/openslide/openslide-java': 'openslide-java',
    'https://github.com/openslide/openslide-python': 'openslide-python',
    'https://github.com/openslide/openslide-winbuild': 'openslide-winbuild',
    'https://github.com/openslide/openslide-automation': 'openslide-automation',
    'https://github.com/openslide/openslide.github.com': 'openslide.github.com',
}

def codebaseGenerator(chdict):
    return all_repositories[chdict['repository']]
c['codebaseGenerator'] = codebaseGenerator

####### OTHER CONFIGURATION

c['caches'] = {
    'Changes' : 1000,
}
