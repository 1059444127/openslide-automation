# -*- python -*-
# ex: set syntax=python:

# This is a sample buildmaster config file. It must be installed as
# 'master.cfg' in your buildmaster's base directory.

# This is the dictionary that the buildmaster pays attention to. We also use
# a shorter alias to save typing.
c = BuildmasterConfig = {}

####### LOCAL CONFIGURATION

from ConfigParser import RawConfigParser
import os
loc = RawConfigParser()
loc.read(os.path.join(os.path.dirname(__file__), 'local.ini'))

####### BUILDSLAVES

# The 'slaves' list defines the set of recognized buildslaves. Each element is
# a BuildSlave object, specifying a unique slave name and password.  The same
# slave name and password must be configured on the slave.
from buildbot.buildslave import BuildSlave
from buildbot.buildslave.ec2 import EC2LatentBuildSlave
c['slaves'] = []
slaves = {
    'el6-amd64': {
        'instance_type': 'm1.medium',
    },
    'f21-amd64': {
        'instance_type': 'm1.medium',
        'distcheck': True,
    },
    'f21-ia32': {
        # Fedora 21 32-bit kernel won't boot on m1.medium
        'instance_type': 'm1.small',
    },
    'fbsd10-amd64': {
        'instance_type': 'm3.medium',
        'CPATH': '/usr/local/include',
        'LIBRARY_PATH': '/usr/local/lib',
        'make': 'gmake',
        'python': 'python2',
        'coverage': False,  # not gcc
    },
    'osx10.10': {
        'CPATH': '/opt/local/include',
        'LIBRARY_PATH': '/opt/local/lib',
        'python': 'python2.7',
        'valgrind': False,  # no debug symbols; many problems in platform
        'coverage': False,  # not gcc
        'parallel': '-j3',
    },
    'wheezy-ppc64': {
        'parallel': '-j3',
    },
}
for name, props in sorted(slaves.items()):
    password = loc.get('slaves', name)
    if 'instance_type' in props:
        slave = EC2LatentBuildSlave(name, password,
            properties=props,
            # Requires ami-filters.patch
            valid_ami_owners=[loc.getint('aws', 'account')],
            valid_ami_location_regex='[0-9]+/%s-[0-9]+$' % name,
            instance_type=props['instance_type'],
            identifier=loc.get('aws', 'access-key'),
            secret_identifier=loc.get('aws', 'secret-key'),
            region='us-east-1',
            keypair_name='openslide-buildslave',
            security_name='openslide-buildslave',
            # Requires instance-profile.patch
            instance_profile_name='openslide-buildslave',
            tags={
                'Name': 'latent-' + name,
            },
            notify_on_missing=loc.get('email', 'admins').split(','),
            spot_instance=True,
            # Requires max-spot-price.patch
            max_spot_price=0.10,
            price_multiplier=1000,
        )
    else:
        slave = BuildSlave(name, password, properties=props)
    c['slaves'].append(slave)

# 'protocols' contains information about protocols which master will use for
# communicating with slaves.
# You must define at least 'port' option that slaves could connect to your master
# with this protocol.
# 'port' must match the value configured into the buildslaves (with their
# --master option)
c['protocols'] = {'pb': {'port': 'tcp:9989:interface=127.0.0.1'}}

####### CHANGESOURCES

# the 'change_source' setting tells the buildmaster how it should find out
# about source code changes.

c['change_source'] = []

####### BUILDERS

# The 'builders' list defines the Builders, which tell Buildbot how to perform a build:
# what steps, and which slaves can execute them.  Note that any particular build will
# only take place on one slave.

from buildbot.process.factory import BuildFactory
from buildbot.process.logobserver import LogLineObserver
from buildbot.process.properties import Property, Interpolate, renderer
from buildbot.status.results import SUCCESS, SKIPPED
from buildbot.steps.master import MasterShellCommand, SetProperty
from buildbot.steps.source.git import Git
from buildbot.steps.shell import ShellCommand, Configure, Compile, Test
from buildbot.steps.slave import MakeDirectory, RemoveDirectory
from buildbot.steps.transfer import FileUpload, MultipleFileUpload

# hideStepIf callables

def hide_skipped(results, step):
    return results == SKIPPED

def hide_unless_error(results, step):
    return results in (SUCCESS, SKIPPED)

# Common property expansions

make = Property('make', default='make')
python = Property('python', default='python')
parallel = Property('parallel', default='-j2')
env = {
    'CPATH': Property('CPATH'),
    'LIBRARY_PATH': Property('LIBRARY_PATH'),
    'PKG_CONFIG_PATH': Property('PKG_CONFIG_PATH'),
}

def build_result_url(item=''):
    return Interpolate('/results/%(prop:buildername)s/%(prop:buildnumber)s/' +
            item)

def build_result_path(item=''):
    return Interpolate('public_html' + build_result_url(item).fmtstring)

@renderer
def cache_if_ec2(props):
    if 'instance_type' in props:
        cache_script = (props['builddir'] +
                '/openslide-automation/scripts/caching-proxy.py')
        return [props.getProperty('python', 'python'), '-u', cache_script]
    else:
        return []

# Build steps

import re

class ShellCommandWithURLs(ShellCommand):
    parms = ShellCommand.parms + ['urls']
    renderables = ['urls']

    def finished(self, results):
        if results == SUCCESS:
            for name, url in sorted(self.urls.items()):
                if url:
                    self.addURL(name, url)
        ShellCommand.finished(self, results)

class OpenSlideTestSuite(Test):
    class TestSuiteLogObserver(LogLineObserver):
        numTests = 0
        numFailed = 0
        errorLog = None

        def outLineReceived(self, line):
            if self.errorLog and self.errorLog.isFinished():
                return
            # Count ANSI color resets as a rough progress metric
            if '\033[1;0m' in line:
                self.numTests += 1
                self.step.setProgress('tests', self.numTests)
            # Strip ANSI color codes
            line = re.sub(r'\033\[1;[0-9]+m', '', line)
            match = re.match('Failed: ([0-9]+)/[0-9]+$', line)
            if match:
                self.numFailed = int(match.group(1))
                if self.errorLog:
                    self.errorLog.finish()
            elif not line.endswith(': OK') and not line.endswith(': skipped'):
                if not self.errorLog:
                    self.errorLog = self.step.addLog('errors')
                if re.match('(==|--)[0-9]+(==|--)', line):
                    # Valgrind output
                    self.errorLog.addStdout(line + '\n')
                else:
                    self.errorLog.addStderr(line + '\n')

    def __init__(self, **kwargs):
        Test.__init__(self, **kwargs)
        self.observer = self.TestSuiteLogObserver()
        self.addLogObserver('stdio', self.observer)
        self.progressMetrics += ('tests',)

    def getText(self, cmd, results):
        ret = Test.getText(self, cmd, results)
        if self.observer.numFailed:
            ret += ['(%d errors)' % self.observer.numFailed]
        return ret

# Build factories

testsuite_factory = BuildFactory([
    Git(
        repourl='https://github.com/openslide/openslide',
        codebase='openslide',
        mode='full',
    ),
    Git(
        repourl='https://github.com/openslide/openslide-automation',
        codebase='openslide-automation',
        workdir='openslide-automation',
        mode='full',
    ),
    ShellCommand(
        command=['autoreconf', '-i'],
        name='autoreconf',
        description='autoconfiscating',
        descriptionDone='autoreconf',
        haltOnFailure=True,
    ),
    Configure(
        env=env,
    ),
    Compile(
        command=[make, parallel, 'V=1'],
        env=env,
    ),
    ShellCommand(
        command=[make, 'distcheck'],
        name='distcheck',
        description='distchecking',
        descriptionDone='distcheck',
        doStepIf=lambda step: step.build.getProperty('distcheck', False),
        hideStepIf=hide_skipped,
    ),
    ShellCommand(
        command=[cache_if_ec2, python, '-u', 'driver', 'unpack'],
        workdir='openslide/test',
        name='unpack',
        description='unpacking tests',
        descriptionDone='unpack',
        haltOnFailure=True,
    ),
    OpenSlideTestSuite(
        command=[python, '-u', 'driver', 'run'],
        workdir='openslide/test',
    ),
    OpenSlideTestSuite(
        command=[python, '-u', 'driver', 'valgrind'],
        workdir='openslide/test',
        name='valgrind',
        description='valgrinding',
        descriptionDone='valgrind',
        doStepIf=lambda step: step.build.getProperty('valgrind', True),
        hideStepIf=hide_skipped,
    ),
    ShellCommandWithURLs(
        command=[python, '-u', 'driver', 'coverage', 'coverage.txt'],
        env=env,
        workdir='openslide/test',
        name='coverage',
        description='checking coverage',
        descriptionDone='coverage',
        urls={
            'report': build_result_url('coverage.txt'),
        },
        doStepIf=lambda step: step.build.getProperty('coverage', True),
        hideStepIf=hide_skipped,
    ),
    FileUpload(
        slavesrc='test/coverage.txt',
        masterdest=build_result_path('coverage.txt'),
        mode=0644,
        doStepIf=lambda step: step.build.getProperty('coverage', True),
        hideStepIf=hide_unless_error,
        haltOnFailure=False,
    ),
    ShellCommandWithURLs(
        command=[python, '-u', 'driver', 'mosaic', 'mosaic.png'],
        workdir='openslide/test',
        name='mosaic',
        description='creating mosaic',
        descriptionDone='mosaic',
        urls={
            'result': build_result_url('mosaic.jpg'),
        },
    ),
    FileUpload(
        slavesrc='test/mosaic.png',
        masterdest=build_result_path('mosaic.png'),
        mode=0644,
        hideStepIf=hide_unless_error,
        haltOnFailure=False,
    ),
    MasterShellCommand(
        command=Interpolate('''
            cd '%s' &&
            convert -quality 90 mosaic.png mosaic.jpg &&
            rm mosaic.png
        ''' % build_result_path().fmtstring),
        name='mosaic-compress',
        description='compressing mosaic',
        descriptionDone='compress mosaic',
        hideStepIf=hide_unless_error,
    ),
    ShellCommand(
        command=[python, '-u', 'driver', 'time'],
        workdir='openslide/test',
        name='time',
        description='timing',
        descriptionDone='time',
    ),
])
testsuite_factory.workdir='openslide'

from datetime import date
import pipes
import sys
@renderer
def winbuild_pkgver(props):
    pkgver = date.today().strftime('%Y%m%d')
    if props['nightly']:
        pkgver += '-nightly'
    return pkgver
@renderer
def winbuild_args(props):
    args = ['-p' + props['pkgver']]
    if props['nightly']:
        args.append('-sg' + props['got_revision']['openslide'][:7])
    return args
def winbuild_make_url(artifact):
    @renderer
    def func(props):
        if props['nightly']:
            return '/snapshots/windows/openslide-%s-%s.zip' % (artifact,
                    props['pkgver'])
        else:
            return ''
    return func
@renderer
def winbuild_index_command(props):
    return ' '.join([
        sys.executable,
        '../scripts/winbuild-index.py',
        'public_html/snapshots/windows',
        props['pkgver'],
        pipes.quote(props['got_revision']['openslide']),
        pipes.quote(props['got_revision']['openslide-java']),
        pipes.quote(props['got_revision']['openslide-winbuild']),
    ])
winbuild_osj_env = env.copy()
winbuild_osj_env['PKG_CONFIG_PATH'] = Interpolate(
        '%(prop:workdir)s/install/lib/pkgconfig%(prop:PKG_CONFIG_PATH:?|:%(prop:PKG_CONFIG_PATH)s|)s')
winbuild_factory = BuildFactory([
    # Prep
    SetProperty(
        property='pkgver',
        value=winbuild_pkgver,
        hideStepIf=hide_unless_error,
    ),
    Git(
        repourl='https://github.com/openslide/openslide',
        codebase='openslide',
        workdir='openslide',
        mode='full',
    ),
    Git(
        repourl='https://github.com/openslide/openslide-java',
        codebase='openslide-java',
        workdir='openslide-java',
        mode='full',
    ),
    Git(
        repourl='https://github.com/openslide/openslide-winbuild',
        codebase='openslide-winbuild',
        mode='full',
    ),
    Git(
        repourl='https://github.com/openslide/openslide-automation',
        codebase='openslide-automation',
        workdir='openslide-automation',
        mode='full',
    ),
    RemoveDirectory(
        dir='install',
        name='clean',
        description='cleaning install dir',
        descriptionDone='clean install dir',
        hideStepIf=hide_unless_error,
    ),

    # Generate OpenSlide tarball if nightly build
    ShellCommand(
        command=['autoreconf', '-i'],
        name='autoreconf-os',
        workdir='openslide',
        description='autoconfiscating openslide',
        descriptionDone='autoreconf openslide',
        haltOnFailure=True,
        doStepIf=lambda step: step.build.getProperty('nightly'),
        hideStepIf=hide_skipped,
    ),
    Configure(
        command=['./configure',
                Interpolate('--prefix=%(prop:workdir)s/install')],
        name='configure-os',
        workdir='openslide',
        env=env,
        description='configuring openslide',
        descriptionDone='configure openslide',
        doStepIf=lambda step: step.build.getProperty('nightly'),
        hideStepIf=hide_skipped,
    ),
    ShellCommand(
        command=[make, 'dist'],
        name='dist-os',
        workdir='openslide',
        env=env,
        description='disting openslide',
        descriptionDone='dist openslide',
        haltOnFailure=True,
        doStepIf=lambda step: step.build.getProperty('nightly'),
        hideStepIf=hide_skipped,
    ),
    # We need to install so OpenSlide Java can find us
    Compile(
        command=[make, parallel, 'V=1'],
        name='build-os',
        workdir='openslide',
        env=env,
        description='building openslide',
        descriptionDone='build openslide',
        doStepIf=lambda step: step.build.getProperty('nightly'),
        hideStepIf=hide_skipped,
    ),
    ShellCommand(
        command=[make, 'install'],
        name='install-os',
        workdir='openslide',
        env=env,
        description='installing openslide',
        descriptionDone='install openslide',
        haltOnFailure=True,
        doStepIf=lambda step: step.build.getProperty('nightly'),
        hideStepIf=hide_skipped,
    ),

    # Generate OpenSlide Java tarball if nightly build
    ShellCommand(
        command=['autoreconf', '-i'],
        name='autoreconf-osj',
        workdir='openslide-java',
        description='autoconfiscating openslide-java',
        descriptionDone='autoreconf openslide-java',
        haltOnFailure=True,
        doStepIf=lambda step: step.build.getProperty('nightly'),
        hideStepIf=hide_skipped,
    ),
    Configure(
        command=['./configure'],
        name='configure-osj',
        workdir='openslide-java',
        env=winbuild_osj_env,
        description='configuring openslide-java',
        descriptionDone='configure openslide-java',
        doStepIf=lambda step: step.build.getProperty('nightly'),
        hideStepIf=hide_skipped,
    ),
    ShellCommand(
        command=[make, 'dist'],
        name='dist-osj',
        workdir='openslide-java',
        env=winbuild_osj_env,
        description='disting openslide-java',
        descriptionDone='dist openslide-java',
        haltOnFailure=True,
        doStepIf=lambda step: step.build.getProperty('nightly'),
        hideStepIf=hide_skipped,
    ),

    # Build
    MakeDirectory(
        dir='openslide-winbuild/tar',
        description='creating tar directory',
        hideStepIf=hide_unless_error,
    ),
    ShellCommand(
        # Use shell for wildcards
        command=['sh', '-c', 'cp ../openslide/openslide-*.tar.xz ' +
                '../openslide-java/openslide-java-*.tar.xz tar'],
        name='copy-tar',
        description='copying tarballs',
        descriptionDone='copy tarballs',
        haltOnFailure=True,
        doStepIf=lambda step: step.build.getProperty('nightly'),
        hideStepIf=hide_unless_error,
    ),
    ShellCommandWithURLs(
        command=[cache_if_ec2, './build.sh', winbuild_args, 'sdist'],
        name='sdist',
        description='sdist',
        haltOnFailure=True,
        urls={
            'zip': winbuild_make_url('winbuild'),
        },
    ),
    ShellCommandWithURLs(
        command=['./build.sh', winbuild_args, parallel, '-m32', 'bdist'],
        name='bdist32',
        description='32-bit bdist',
        haltOnFailure=True,
        urls={
            'zip': winbuild_make_url('win32'),
        },
    ),
    ShellCommandWithURLs(
        command=['./build.sh', winbuild_args, parallel, '-m64', 'bdist'],
        name='bdist64',
        description='64-bit bdist',
        haltOnFailure=True,
        urls={
            'zip': winbuild_make_url('win64'),
        },
    ),

    # Update website if nightly build
    MultipleFileUpload(
        slavesrcs=[
            Interpolate('openslide-winbuild/openslide-winbuild-%(prop:pkgver)s.zip'),
            Interpolate('openslide-winbuild/openslide-win32-%(prop:pkgver)s.zip'),
            Interpolate('openslide-winbuild/openslide-win64-%(prop:pkgver)s.zip'),
        ],
        masterdest='public_html/snapshots/windows/',
        # http://trac.buildbot.net/ticket/3009
        workdir='',
        mode=0644,
        doStepIf=lambda step: step.build.getProperty('nightly'),
        hideStepIf=hide_unless_error,
    ),
    MasterShellCommand(
        command=winbuild_index_command,
        name='index',
        description='indexing',
        descriptionDone='index',
        doStepIf=lambda step: step.build.getProperty('nightly'),
        hideStepIf=hide_unless_error,
    ),
])
winbuild_factory.workdir='openslide-winbuild'

from buildbot.config import BuilderConfig

c['builders'] = [
    BuilderConfig(
        name='winbuild',
        slavename='f21-amd64',
        factory=winbuild_factory
    ),
]
# testsuite-* builders
for slave in c['slaves']:
    c['builders'].append(BuilderConfig(
        name='testsuite-' + slave.slavename,
        category='testsuite',
        slavename=slave.slavename,
        factory=testsuite_factory
    ))

####### SCHEDULERS

# Configure the Schedulers, which decide how to react to incoming changes.

from buildbot.schedulers.timed import Nightly
from buildbot.changes import filter
c['schedulers'] = [
    Nightly(
        name="testsuite",
        builderNames=[
            b.name for b in c['builders'] if b.name.startswith('testsuite-')
        ],
        change_filter=filter.ChangeFilter(
            codebase='openslide',
            branch='master',
        ),
        codebases={
            'openslide': {
                'repository': 'https://github.com/openslide/openslide',
                'branch': 'master',
            },
            'openslide-automation': {
                'repository': 'https://github.com/openslide/openslide-automation',
                'branch': 'master',
            },
        },
        branch='master',  # required
        hour=5,
        onlyIfChanged=True,
    ),
    Nightly(
        name='winbuild-nightly',
        builderNames=['winbuild'],
        change_filter=filter.ChangeFilter(
            codebase=['openslide', 'openslide-java', 'openslide-winbuild'],
            branch='master',
        ),
        codebases={
            'openslide': {
                'repository': 'https://github.com/openslide/openslide',
                'branch': 'master',
            },
            'openslide-java': {
                'repository': 'https://github.com/openslide/openslide-java',
                'branch': 'master',
            },
            'openslide-winbuild': {
                'repository': 'https://github.com/openslide/openslide-winbuild',
                'branch': 'master',
            },
            'openslide-automation': {
                'repository': 'https://github.com/openslide/openslide-automation',
                'branch': 'master',
            },
        },
        properties={
            'nightly': True,
        },
        branch='master',  # required
        hour=5,
        onlyIfChanged=True,
    ),
]

####### STATUS TARGETS

# 'status' is a list of Status Targets. The results of each build will be
# pushed to these targets. buildbot/status/*.py has a variety to choose from,
# including web pages, email senders, and IRC bots.

from buildbot.status import html
from buildbot.status.mail import MailNotifier
from buildbot.status.web import authz

c['status'] = [
    html.WebStatus(
        http_port='tcp:8010:interface=127.0.0.1',
        authz=authz.Authz(),
        change_hook_dialects={
            'github': {
                # See github-hmac.patch
                'secret': loc.get('github', 'secret'),
            },
        },
        # Username/password transmitted in the clear via HTTP Basic.
        # Gives partial protection in case of an accidental rollback of
        # github-hmac.patch during a Buildbot upgrade.
        # Password should be different from the secret above.
        change_hook_auth=['file:' + os.path.join(os.path.dirname(__file__),
                'changehook.password')],
    ),
    MailNotifier(
        builders=['winbuild'],
        fromaddr='openslide@openslide.org',
        sendToInterestedUsers=False,
        extraRecipients=loc.get('email', 'winbuild').split(','),
        mode='warnings',
    ),
]

####### PROJECT IDENTITY

# the 'title' string will appear at the top of this buildbot
# installation's html.WebStatus home page (linked to the
# 'titleURL') and is embedded in the title of the waterfall HTML page.

c['title'] = "OpenSlide"
c['titleURL'] = "http://openslide.org/"

# the 'buildbotURL' string should point to the location where the buildbot's
# internal web server (usually the html.WebStatus page) is visible. This
# typically uses the port number set in the Waterfall 'status' entry, but
# with an externally-visible host name which the buildbot cannot figure out
# without some help.

c['buildbotURL'] = "http://buildbot.openslide.org/"

####### DB URL

c['db'] = {
    # This specifies what database buildbot uses to store its state.  You can leave
    # this at its default for all but the largest installations.
    'db_url' : "sqlite:///state.sqlite",
}

####### CODEBASES

all_repositories = {
    'https://github.com/openslide/openslide': 'openslide',
    'https://github.com/openslide/openslide-java': 'openslide-java',
    'https://github.com/openslide/openslide-python': 'openslide-python',
    'https://github.com/openslide/openslide-winbuild': 'openslide-winbuild',
    'https://github.com/openslide/openslide-automation': 'openslide-automation',
    'https://github.com/openslide/openslide.github.com': 'openslide.github.com',
}

def codebaseGenerator(chdict):
    return all_repositories[chdict['repository']]
c['codebaseGenerator'] = codebaseGenerator

####### OTHER CONFIGURATION

c['caches'] = {
    'Changes' : 1000,
}
