# -*- python -*-
# ex: set syntax=python:

# This is a sample buildmaster config file. It must be installed as
# 'master.cfg' in your buildmaster's base directory.

# This is the dictionary that the buildmaster pays attention to. We also use
# a shorter alias to save typing.
c = BuildmasterConfig = {}

####### LOCAL CONFIGURATION

from ConfigParser import RawConfigParser
import os
loc = RawConfigParser()
loc.read(os.path.join(os.path.dirname(__file__), 'local.ini'))

####### BUILDSLAVES

# The 'slaves' list defines the set of recognized buildslaves. Each element is
# a BuildSlave object, specifying a unique slave name and password.  The same
# slave name and password must be configured on the slave.
from buildbot.buildslave import BuildSlave
from buildbot.buildslave.ec2 import EC2LatentBuildSlave
c['slaves'] = []
slaves = {
    'el6-amd64': {
        'instance_type': 'm3.medium',
        'PKG_CONFIG_PATH': '/usr/local/lib/pkgconfig',
    },
    'f20-amd64': {
        'instance_type': 'm3.medium',
    },
    'fbsd10-amd64': {
        'instance_type': 'm3.medium',
        'CPATH': '/usr/local/include',
        'LIBRARY_PATH': '/usr/local/lib',
        'make': 'gmake',
        'python': 'python2',
        'coverage': False,  # not gcc
    },
    'wheezy-ia32': {
        'instance_type': 'm1.medium',
    },
    'wheezy-ppc64': {
        'parallel': '-j2',
    },
}
for name, props in slaves.items():
    password = loc.get('slaves', name)
    if 'instance_type' in props:
        slave = EC2LatentBuildSlave(name, password,
            properties=props,
            # Requires ami-filters.patch
            valid_ami_owners=[loc.getint('aws', 'account')],
            valid_ami_location_regex='[0-9]+/%s-[0-9]+$' % name,
            instance_type=props['instance_type'],
            identifier=loc.get('aws', 'access-key'),
            secret_identifier=loc.get('aws', 'secret-key'),
            region='us-east-1',
            keypair_name='openslide-buildslave',
            security_name='openslide-buildslave',
            # Requires instance-profile.patch
            instance_profile_name='openslide-buildslave',
            tags={
                'Name': 'latent-' + name,
            },
            notify_on_missing=loc.get('email', 'admins').split(','),
            spot_instance=True,
            # Requires max-spot-price.patch
            max_spot_price=0.10,
            price_multiplier=1000,
        )
    else:
        slave = BuildSlave(name, password, properties=props)
    c['slaves'].append(slave)

# 'protocols' contains information about protocols which master will use for
# communicating with slaves.
# You must define at least 'port' option that slaves could connect to your master
# with this protocol.
# 'port' must match the value configured into the buildslaves (with their
# --master option)
c['protocols'] = {'pb': {'port': 'tcp:9989:interface=127.0.0.1'}}

####### CHANGESOURCES

# the 'change_source' setting tells the buildmaster how it should find out
# about source code changes.

c['change_source'] = []

####### BUILDERS

# The 'builders' list defines the Builders, which tell Buildbot how to perform a build:
# what steps, and which slaves can execute them.  Note that any particular build will
# only take place on one slave.

from buildbot.process.factory import BuildFactory
from buildbot.process.logobserver import LogLineObserver
from buildbot.process.properties import Property, renderer
from buildbot.status.results import SKIPPED
from buildbot.steps.source.git import Git
from buildbot.steps.shell import ShellCommand, Configure, Compile, Test

# hideStepIf callable to hide build step if not run
def hide_skipped(results, step):
    return results == SKIPPED

# Common property expansions

make = Property('make', default='make')
python = Property('python', default='python')
parallel = Property('parallel', default='-j1')
env = {
    'CPATH': Property('CPATH'),
    'LIBRARY_PATH': Property('LIBRARY_PATH'),
    'PKG_CONFIG_PATH': Property('PKG_CONFIG_PATH'),
}

@renderer
def cache_if_ec2(props):
    if 'instance_type' in props:
        cache_script = (props['builddir'] +
                '/openslide-automation/scripts/caching-proxy.py')
        return [props.getProperty('python', 'python'), '-u', cache_script]
    else:
        return []

# Build steps

import re

class OpenSlideTestSuite(Test):
    class TestSuiteLogObserver(LogLineObserver):
        numTests = 0
        numFailed = 0
        errorLog = None

        def outLineReceived(self, line):
            if self.errorLog and self.errorLog.isFinished():
                return
            # Count ANSI color resets as a rough progress metric
            if '\033[1;0m' in line:
                self.numTests += 1
                self.step.setProgress('tests', self.numTests)
            # Strip ANSI color codes
            line = re.sub(r'\033\[1;[0-9]+m', '', line)
            match = re.match('Failed: ([0-9]+)/[0-9]+$', line)
            if match:
                self.numFailed = int(match.group(1))
                if self.errorLog:
                    self.errorLog.finish()
            elif not line.endswith(': OK') and not line.endswith(': skipped'):
                if not self.errorLog:
                    self.errorLog = self.step.addLog('errors')
                self.errorLog.addStdout(line + '\n')

    def __init__(self, **kwargs):
        Test.__init__(self, **kwargs)
        self.observer = self.TestSuiteLogObserver()
        self.addLogObserver('stdio', self.observer)
        self.progressMetrics += ('tests',)

    def getText(self, cmd, results):
        ret = Test.getText(self, cmd, results)
        if self.observer.numFailed:
            ret += ['(%d errors)' % self.observer.numFailed]
        return ret

# Build factories

testsuite_factory = BuildFactory([
    Git(
        repourl='https://github.com/openslide/openslide',
        codebase='openslide',
        mode='full',
    ),
    Git(
        repourl='https://github.com/openslide/openslide-automation',
        codebase='openslide-automation',
        workdir='openslide-automation',
        mode='full',
    ),
    ShellCommand(
        command=['autoreconf', '-i'],
        name='autoreconf',
        description='autoconfiscating',
        descriptionDone='autoreconf',
        haltOnFailure=True,
    ),
    Configure(
        env=env,
    ),
    Compile(
        command=[make, parallel, 'V=1'],
        env=env,
    ),
    ShellCommand(
        command=[cache_if_ec2, python, '-u', 'driver', 'unpack'],
        workdir='openslide/test',
        name='unpack',
        description='unpacking tests',
        descriptionDone='unpack',
        haltOnFailure=True,
    ),
    OpenSlideTestSuite(
        command=[python, '-u', 'driver', 'run'],
        workdir='openslide/test',
    ),
    OpenSlideTestSuite(
        command=[python, '-u', 'driver', 'valgrind'],
        workdir='openslide/test',
        name='valgrind',
        description='valgrinding',
        descriptionDone='valgrind',
    ),
    ShellCommand(
        command=[python, '-u', 'driver', 'coverage', 'coverage.txt'],
        workdir='openslide/test',
        name='coverage',
        description='checking coverage',
        descriptionDone='coverage',
        doStepIf=lambda step: step.build.getProperty('coverage', True),
        hideStepIf=hide_skipped,
    ),
    ShellCommand(
        command=['cat', 'coverage.txt'],
        workdir='openslide/test',
        name='coverage-report',
        description='reporting coverage',
        descriptionDone='coverage report',
        doStepIf=lambda step: step.build.getProperty('coverage', True),
        hideStepIf=hide_skipped,
    ),
    ShellCommand(
        command=[python, '-u', 'driver', 'time'],
        workdir='openslide/test',
        name='time',
        description='timing',
        descriptionDone='time',
    ),
])
testsuite_factory.workdir='openslide'

from buildbot.config import BuilderConfig

c['builders'] = []
# testsuite-* builders
for slave in c['slaves']:
    c['builders'].append(BuilderConfig(
        name='testsuite-' + slave.slavename,
        category='testsuite',
        slavename=slave.slavename,
        factory=testsuite_factory
    ))

####### SCHEDULERS

# Configure the Schedulers, which decide how to react to incoming changes.

from buildbot.schedulers.basic import SingleBranchScheduler
from buildbot.changes import filter
c['schedulers'] = [
    SingleBranchScheduler(
        name="testsuite",
        builderNames=[
            b.name for b in c['builders'] if b.name.startswith('testsuite-')
        ],
        change_filter=filter.ChangeFilter(
            codebase='openslide',
            branch='master',
        ),
        codebases={
            'openslide': {
                'repository': 'https://github.com/openslide/openslide',
                'branch': 'master',
            },
            'openslide-automation': {
                'repository': 'https://github.com/openslide/openslide-automation',
                'branch': 'master',
            },
        },
        treeStableTimer=120,
    ),
]

####### STATUS TARGETS

# 'status' is a list of Status Targets. The results of each build will be
# pushed to these targets. buildbot/status/*.py has a variety to choose from,
# including web pages, email senders, and IRC bots.

from buildbot.status import html
from buildbot.status.web import authz

c['status'] = [
    html.WebStatus(
        http_port='tcp:8010:interface=127.0.0.1',
        authz=authz.Authz(),
        change_hook_dialects={
            'github': {
                # See github-hmac.patch
                'secret': loc.get('github', 'secret'),
            },
        },
        # Username/password transmitted in the clear via HTTP Basic.
        # Gives partial protection in case of an accidental rollback of
        # github-hmac.patch during a Buildbot upgrade.
        # Password should be different from the secret above.
        change_hook_auth=['file:' + os.path.join(os.path.dirname(__file__),
                'changehook.password')],
    ),
]

####### PROJECT IDENTITY

# the 'title' string will appear at the top of this buildbot
# installation's html.WebStatus home page (linked to the
# 'titleURL') and is embedded in the title of the waterfall HTML page.

c['title'] = "OpenSlide"
c['titleURL'] = "http://openslide.org/"

# the 'buildbotURL' string should point to the location where the buildbot's
# internal web server (usually the html.WebStatus page) is visible. This
# typically uses the port number set in the Waterfall 'status' entry, but
# with an externally-visible host name which the buildbot cannot figure out
# without some help.

c['buildbotURL'] = "http://buildbot.openslide.org/"

####### DB URL

c['db'] = {
    # This specifies what database buildbot uses to store its state.  You can leave
    # this at its default for all but the largest installations.
    'db_url' : "sqlite:///state.sqlite",
}

####### CODEBASES

all_repositories = {
    'https://github.com/openslide/openslide': 'openslide',
    'https://github.com/openslide/openslide-java': 'openslide-java',
    'https://github.com/openslide/openslide-python': 'openslide-python',
    'https://github.com/openslide/openslide-winbuild': 'openslide-winbuild',
    'https://github.com/openslide/openslide-automation': 'openslide-automation',
    'https://github.com/openslide/openslide.github.com': 'openslide.github.com',
}

def codebaseGenerator(chdict):
    return all_repositories[chdict['repository']]
c['codebaseGenerator'] = codebaseGenerator

####### OTHER CONFIGURATION

c['caches'] = {
    'Changes' : 1000,
}
